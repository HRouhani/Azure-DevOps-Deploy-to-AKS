trigger:
- main

resources:
- repo: self

variables:
  imageRepo: mondoo-app
  tag: latest

stages:

- stage: Build
  displayName: Build and push the image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build and Push image
      inputs:
        containerRegistry: 'AzureRegistery'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
        tags: |
          $(tag)
          latest
    # since in this example our manifest is located in our github, we use "Publish Pipeline Artifacts" in order to make the contents of the kubernetes folder which are our manifest files to any stage from now on
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'
        
- stage: Deploy
  displayName: Deploy to Kubernetes Cluster
  dependsOn: Build
  variables:
    k8s-secret: k8sauth
    acrdevurl: 'securityimages.azurecr.io'
  jobs:
  - job: Deploy
    displayName: Deploy to AKS
    pool: 
      vmImage: ubuntu-latest
    steps:
    # In the previou stage we published the artifacts to our pipeline, and now we need to download it in the stages which we need them!
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
        # whenever the AKS cluster needs to pull an image from the azure container registry, it will use the following credential for that
        # and this is due to the fact that Azure Container Registery is Private
    - task: KubernetesManifest@0
      inputs:
        action: 'createSecret'
        kubernetesServiceConnection: 'k8s-connection-default'
        namespace: 'default'
        secretType: 'dockerRegistry'
        secretName: '$(k8s-secret)'
        dockerRegistryEndpoint: 'AzureRegistery'
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'k8s-connection-default'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/deployment.yml
          $(Pipeline.Workspace)/manifests/service.yml
        containers: '$(acrdevurl)/$(imageRepo):$(tag)'
        imagePullSecrets: '$(k8s-secret)'


- stage: Scan
  displayName: Scan with Cnspec
  dependsOn: Deploy
  jobs:
  - job: ScanImage
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
        
    - script: |
        bash -c "$(curl -sSL https://install.mondoo.com/sh)"
        cnspec version
      displayName: "Install cnspec"
    
    - script: |
        # be sure to change the score-threshold value to control the minimum accepted asset score before CI jobs fail
        cnspec scan k8s --path '$(Pipeline.Workspace)/manifests/deployment.yml' --score-threshold 100
        cnspec scan k8s --path '$(Pipeline.Workspace)/manifests/service.yml' --score-threshold 100
      displayName: "Scan Manifests with cnspec"
      env:
        MONDOO_CONFIG_BASE64: $(MONDOO_CONFIG_BASE64)
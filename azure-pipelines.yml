trigger:
- main

resources:
- repo: self

variables:
  imageRepo: sampleapp
  #imageNamespace: sampleapp.azurecr.io
  #imageName: sampleapp.azurecr.io:latest
  #tag: '$(Build.BuildId)'
  tag: latest

stages:

- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'AzureRegistery'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
        tags: |
          $(tag)
          latest
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'
        
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    k8s-secret: k8sauth
    acrdevurl: 'securityimages.azurecr.io'
    #replicaNo: 3
  jobs:
  - job: Deploy
    displayName: Deploy to AKS
    #environment: 'k8sdev.default'
    pool: 
      vmImage: ubuntu-latest
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
        # whenever the AKS cluster needs to pull an image from the azure container registry, it will use the following credential for that
    - task: KubernetesManifest@0
      inputs:
        action: 'createSecret'
        kubernetesServiceConnection: 'k8s-connection-default'
        namespace: 'default'
        secretType: 'dockerRegistry'
        secretName: '$(k8s-secret)'
        dockerRegistryEndpoint: 'AzureRegistery'
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'k8s-connection-default'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/deployment.yml
          $(Pipeline.Workspace)/manifests/service.yml
        containers: '$(acrdevurl)/$(imageRepo):$(tag)'
        imagePullSecrets: '$(k8s-secret)'


- stage: ScanwithCnspec
  jobs:
  - job: ScanImage
    steps:
    - script: |
        bash -c "$(curl -sSL https://install.mondoo.com/sh)"
        cnspec version
      displayName: "Install cnspec"
    
    - script: |
        # be sure to change the score-threshold value to control the minimum accepted asset score before CI jobs fail
        #cnspec scan k8s --path '$(Pipeline.Workspace)/manifests/deployment.yml' --score-threshold 100
        
      displayName: "Scan Manifests with cnspec"
      #env:
      #  MONDOO_CONFIG_BASE64: $(MONDOO_CONFIG_BASE64)